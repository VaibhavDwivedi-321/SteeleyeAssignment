{"ast":null,"code":"import _slicedToArray from \"E:/Steeleye/SteeleyeFixed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"E:\\\\Steeleye\\\\SteeleyeFixed\\\\src\\\\components\\\\List.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Single List Item\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar WrappedSingleListItem = function WrappedSingleListItem(_ref) {\n  var index = _ref.index,\n    isSelected = _ref.isSelected,\n    onClickHandler = _ref.onClickHandler,\n    text = _ref.text;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    style: {\n      backgroundColor: isSelected ? \"green\" : \"red\"\n    },\n    onClick: function onClick() {\n      return onClickHandler(index);\n    },\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n};\n_c = WrappedSingleListItem;\nWrappedSingleListItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  onClickHandler: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired\n};\nvar SingleListItem = /*#__PURE__*/memo(WrappedSingleListItem);\n\n// List Component\n_c2 = SingleListItem;\nvar WrappedListComponent = function WrappedListComponent(_ref2) {\n  _s();\n  var items = _ref2.items;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedIndex = _useState2[0],\n    setSelectedIndex = _useState2[1];\n  useEffect(function () {\n    setSelectedIndex(\"\");\n  }, [items]);\n  var handleClick = function handleClick(index) {\n    setSelectedIndex(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    style: {\n      textAlign: \"left\"\n    },\n    children: items && items.map(function (item, index) {\n      return /*#__PURE__*/_jsxDEV(SingleListItem, {\n        onClickHandler: function onClickHandler() {\n          return handleClick(index);\n        },\n        text: item.text,\n        index: index,\n        isSelected: index === selectedIndex\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n_s(WrappedListComponent, \"NO2Z4Ih2zQs4AGOwC/cttN92e0w=\");\n_c3 = WrappedListComponent;\nWrappedListComponent.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired\n  }))\n};\nWrappedListComponent.defaultProps = {\n  items: [{\n    text: \"Vaibhav Dwivedi\"\n  }, {\n    text: \"12015229\"\n  }, {\n    text: \"Lovely Professional University\"\n  }, {\n    text: \"Thanks For Visiting My Github\"\n  }]\n};\nvar List = /*#__PURE__*/memo(WrappedListComponent);\n_c4 = List;\nexport default List;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WrappedSingleListItem\");\n$RefreshReg$(_c2, \"SingleListItem\");\n$RefreshReg$(_c3, \"WrappedListComponent\");\n$RefreshReg$(_c4, \"List\");","map":{"version":3,"names":["React","useState","useEffect","memo","PropTypes","jsxDEV","_jsxDEV","WrappedSingleListItem","_ref","index","isSelected","onClickHandler","text","style","backgroundColor","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","_c","propTypes","number","isRequired","bool","func","string","SingleListItem","_c2","WrappedListComponent","_ref2","_s","items","_useState","_useState2","_slicedToArray","selectedIndex","setSelectedIndex","handleClick","textAlign","map","item","_c3","arrayOf","shape","defaultProps","List","_c4","$RefreshReg$"],"sources":["E:/Steeleye/SteeleyeFixed/src/components/List.jsx"],"sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Single List Item\r\nconst WrappedSingleListItem = ({ index, isSelected, onClickHandler, text }) => {\r\n  return (\r\n    <li\r\n      style={{ backgroundColor: isSelected ? \"green\" : \"red\" }}\r\n      onClick={() => onClickHandler(index)}\r\n    >\r\n      {text}\r\n    </li>\r\n  );\r\n};\r\n\r\nWrappedSingleListItem.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  isSelected: PropTypes.bool.isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  text: PropTypes.string.isRequired\r\n};\r\n\r\nconst SingleListItem = memo(WrappedSingleListItem);\r\n\r\n// List Component\r\nconst WrappedListComponent = ({ items }) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setSelectedIndex(\"\");\r\n  }, [items]);\r\n\r\n  const handleClick = (index) => {\r\n    setSelectedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <ul style={{ textAlign: \"left\" }}>\r\n      {items &&\r\n        items.map((item, index) => (\r\n          <SingleListItem\r\n            key={index}\r\n            onClickHandler={() => handleClick(index)}\r\n            text={item.text}\r\n            index={index}\r\n            isSelected={index === selectedIndex}\r\n          />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nWrappedListComponent.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nWrappedListComponent.defaultProps = {\r\n  items: [\r\n    { text: \"Vaibhav Dwivedi\" },\r\n    { text: \"12015229\" },\r\n    { text: \"Lovely Professional University\" },\r\n    { text: \"Thanks For Visiting My Github\" }\r\n  ]\r\n};\r\n\r\nconst List = memo(WrappedListComponent);\r\n\r\nexport default List;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}